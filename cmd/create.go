// Copyright 2024 Canonical Ltd
// SPDX-License-Identifier: AGPL

package cmd

import (
	"context"
	"fmt"
	"os"

	"github.com/canonical/identity-platform-admin-ui/internal/authorization"
	"github.com/canonical/identity-platform-admin-ui/internal/logging"
	"github.com/canonical/identity-platform-admin-ui/internal/monitoring"
	"github.com/canonical/identity-platform-admin-ui/internal/openfga"
	"github.com/canonical/identity-platform-admin-ui/internal/tracing"
	"github.com/spf13/cobra"
)

// createCmd represents the create command
var createCmd = &cobra.Command{
	Use:   "create",
	Short: "Create an admin user",
	Long:  `Create an admin user.`,
	Run: func(cmd *cobra.Command, args []string) {
		apiUrl, _ := cmd.Flags().GetString("fga-api-url")
		apiToken, _ := cmd.Flags().GetString("fga-api-token")
		storeId, _ := cmd.Flags().GetString("fga-store-id")
		modelId, _ := cmd.Flags().GetString("fga-model-id")
		user, _ := cmd.Flags().GetString("user")

		createAdmin(apiUrl, apiToken, storeId, modelId, user)
	},
}

func init() {
	adminCmd.AddCommand(createCmd)

	createCmd.Flags().String("fga-api-url", "", "The openfga API URL")
	createCmd.Flags().String("fga-api-token", "", "The openfga API token")
	createCmd.Flags().String("fga-store-id", "", "The openfga store")
	createCmd.Flags().String("fga-model-id", "", "The openfga model")
	createCmd.Flags().String("user", "", "The admin user name, if not specified an autogenerated ID will be used")
	createCmd.MarkFlagRequired("fga-api-url")
	createCmd.MarkFlagRequired("fga-api-token")
	createCmd.MarkFlagRequired("fga-store-id")
	createCmd.MarkFlagRequired("user")
}

func createAdmin(apiUrl, apiToken, storeId, ModelId, user string) {
	logger := logging.NewNoopLogger()
	tracer := tracing.NewNoopTracer()
	monitor := monitoring.NewNoopMonitor("", logger)
	scheme, host, err := parseURL(apiUrl)
	if err != nil {
		panic(err)
	}
	cfg := openfga.NewConfig(scheme, host, storeId, apiToken, "", false, tracer, monitor, logger)
	fgaClient := openfga.NewClient(cfg)
	auth := authorization.NewAuthorizer(fgaClient, tracer, monitor, logger)

	err = auth.CreateAdmin(context.Background(), user)
	if err != nil {
		fmt.Printf("failed to create user: %s", err)
		os.Exit(1)
	}

	fmt.Printf("Created admin user: %s\n", user)
}
